Переменные (Variables):

    Присвоение значения: variable_name=value
    Использование переменной: $variable_name

Комментарии (Comments):

    Однострочные комментарии начинаются с символа #.

Вывод на экран (Print):

    echo "Текст": Выводит текст на экран.

Условные операторы (Conditional Statements):

    if - then - fi: Условное выполнение кода.
    Пример:

    bash

    if [ условие ]; then
        # код для выполнения, если условие истинно
    fi

Операторы сравнения (Comparison Operators):

    -eq: равно
    -ne: не равно
    -gt: больше
    -lt: меньше
    -ge: больше или равно
    -le: меньше или равно
    Пример:

    bash

    if [ $a -eq $b ]; then
        echo "a равно b"
    fi

Циклы (Loops):

    for:

    bash

for переменная in значение1 значение2 значение3; do
    # код для выполнения в каждой итерации
done

while:

bash

    while [ условие ]; do
        # код для выполнения, пока условие истинно
    done

Функции (Functions):

bash

function имя_функции() {
    # код функции
}

# Вызов функции:
имя_функции

Параметры командной строки (Command-Line Arguments):

    Передача аргументов скрипту:

    bash

    # $1, $2, $3 и т.д. представляют аргументы, переданные скрипту.
    echo "Первый аргумент: $1"

Чтение пользовательского ввода (User Input):

bash

    read переменная
    echo "Вы ввели: $переменная"

    Команды работы с файлами (File Commands):
        touch filename: Создать пустой файл.
        cat filename: Вывести содержимое файла на экран.
        cp source_file destination_file: Копировать файл.
        mv old_name new_name: Переименовать или переместить файл.
        rm filename: Удалить файл.
        mkdir directory_name: Создать новую директорию.
        rmdir directory_name: Удалить пустую директорию.



Объявление переменных:

go

var x int     // Объявление целочисленной переменной x
var y float64 // Объявление переменной с плавающей точкой y

Операторы:

    Арифметические операторы: + (сложение), - (вычитание), * (умножение), / (деление), % (остаток от деления).
    Операторы сравнения: == (равно), != (не равно), > (больше), < (меньше), >= (больше или равно), <= (меньше или равно).

Условные операторы:

    if, else if, else: Условное выполнение кода.
    Пример:

    go

    if x > 10 {
        // код для выполнения, если x больше 10
    } else if x == 10 {
        // код для выполнения, если x равно 10
    } else {
        // код для выполнения во всех остальных случаях
    }

Циклы:

    for: Используется для выполнения кода несколько раз.
    Пример:

    go

        for i := 0; i < 5; i++ {
            // код для выполнения в каждой итерации
        }

Работа со строками:

    Объявление переменных:

    go

var str string // Объявление строки str

Операторы и функции:

    Конкатенация строк: + (плюс) оператор для объединения строк.
    Длина строки: len(str) функция для определения количества символов в строке.

Индексирование строк:

    Строки в Go являются наборами байтов, и каждый символ представляется байтом. Можно получить доступ к отдельным символам по индексу.
    Пример:

    go

    str := "Hello"
    fmt.Println(str[0]) // Выведет байт (ASCII) символа "H"

Итерация по строке:

    Можно перебирать символы в строке с помощью цикла for.
    Пример:

    go

    str := "Hello"
    for _, char := range str {
        fmt.Printf("%c ", char) // Выведет каждый символ строки через пробел
    }

Сравнение строк:

    Сравнение строк происходит с помощью функции strings.Compare() или операторов сравнения (==, !=).
    Пример:

    go

    str1 := "Hello"
    str2 := "World"
    if strings.Compare(str1, str2) == 0 {
        fmt.Println("Строки равны")
    } else {
        fmt.Println("Строки не равны")
    }

Другие полезные функции для работы со строками:

    strings.Contains(): Проверяет, содержится ли подстрока в строке.
    strings.Split(): Разделяет строку на подстроки по заданному разделителю.
    strings.ToLower() и strings.ToUpper(): Преобразуют строку в нижний или верхний регистр.